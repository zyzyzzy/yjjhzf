<?phpnamespace Unfreeze\Controller;use Think\Controller;//多条订单同时解冻class UnfreezeController extends Controller {    protected $parameters = [        "merid",        "version",        "createtime",        "request_url",        "notifyurl",        "content",        "sign",    ];    protected $contentArr = [        "merorderno",        'request_time',    ];    protected $exceptParameter = [        'sign',    ];    protected $error = [];    protected $error_arr = [];    protected $version;    protected $merid;    protected $request_url;    protected $notifyurl;    protected $createtime;    protected $sign;    protected $content;    protected $content_arr;    private $secretKey;    public function index()    {        $par = $_POST;        //判断数据的合法性        $this->checkParameters($par);        //订单逐条判断处理        foreach ($this->content_arr as $key=>$item) {            //检查是否可以解冻            $this->checkUnfreeze($key,$item);            if($this->error_arr[$key]['status']!='0001'){                //解冻处理                ob_start();   //打开缓冲区                M()->startTrans();//开启事务                //查询冻结订单信息                $freeze_order = $this->getOrderfreezemoney($item['freezeordernumber']);                //查询原始金额                $user_money = $this->getUsermoney($freeze_order['user_id']);                //1.用户金额修改程序                $res1 = $this->saveUsermoney($freeze_order,$user_money);                if(!$res1){                    M()->rollback();  //回滚                    $this->error_arr[$key] = ['status' => "0001", "msg" => "任务失败,原因是修改用户金额失败"];                }                //2.添加金额变动记录                $res2 = $this->addMoneychange($freeze_order,$user_money);                if(!$res2){                    M()->rollback();  //回滚                    $this->error_arr[$key] = ['status' => "0001", "msg" => "任务失败,原因是添加资金变动记录失败"];                }                //3.修改冻结订单字段                $res3 = $this->saveOrderfreezemoney($item['freezeordernumber']);                if(!$res3){                    M()->rollback();  //回滚                    $this->error_arr[$key] = ['status' => "0001", "msg" => "任务失败,原因是修改冻结订单记录失败"];                }                M()->commit();    //事务提交                //4.添加自动解冻记录                $this->addAutoUnfreeze($freeze_order['sysordernumber'],$freeze_order['id']);                $this->error_arr[$key] = ['status' => "0000", "msg" => "解冻成功"];            }            $this->error_arr[$key]['merorderno'] = $item['freezeordernumber'];        }        //2019-02-26汪桂芳修改        //全部处理完成后给独立系统返回数据        $return = [            'status' => "0000",            "msg" => "订单解冻申请成功",            'merid'=>$par['merid'],            'content'=>$this->error_arr        ];        //签名        $userKey = C('AMNPAY_SECRETKEY'); //与独立系统对接的密钥,从配置文件读取        $signStr = $this->getReturnSignStr($return); //签名字符串        openssl_sign($signStr, $sign, $userKey);  //rsa加密        $return['sign'] = base64_encode($sign);        //返回成功信息        $this->ajaxReturn($return, "json", JSON_UNESCAPED_UNICODE);    }    //检查参数是否完整    protected function checkParameters($data)    {        //检查参数合法性        foreach ($this->parameters as $parameter) {            if (array_key_exists($parameter, $data)) {                if (!$data[$parameter]) {                    $this->error = ['status' => "0001", "msg" => "参数" . $parameter . "不能为空"];                }                //检查参数是否合法                $fun = "check" . ucfirst($parameter);                $this->$fun($data[$parameter]);            } else {                $this->error = ['status' => "0001", "msg" => "参数" . $parameter . "不能为空"];            }            if (count($this->error) > 0) {                $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);            }        }    }    //检查商户号    protected function checkMerid($merid)    {        if ($merid != C('AMNPAY_MERID')) {            $this->error = ['status' => "0001", "msg" => "参数merid错误"];        }        $this->merid = $merid;        return $this;    }    //检查版本号    protected function checkVersion($version)    {        if ($version != C('AMNPAY_VERSION')) {            $this->error = ['status' => "0001", "msg" => "版本号错误"];        }        $this->version = $version;        return $this;    }    //检查请求时间    protected function checkCreatetime($createtime)    {        if (!preg_match("#\d{4}(\-[0-1][0-9])(\-[0-3][0-9])\s[0-2][0-9](\:[0-5][0-9]){2}#", $createtime, $match)) {            $this->error = ['status' => "0001", "msg" => "createtime格式错误"];        }        $this->createtime = $createtime;        return $this;    }    //检查请求地址    protected function checkRequest_url($request_url)    {        $url = "http://www.amnpay.com/Unfreeze/Unfreeze/index.html";        if($request_url!=$url){            $this->error = ['status' => "0001", "msg" => "请求地址错误"];        }        $this->request_url = $request_url;        return $this;    }    //检查回调地址    protected function checkNotifyurl($notifyurl)    {        $this->notifyurl = $notifyurl;        return $this;    }    //检查解冻订单数组    protected function checkContent($content)    {        $this->content = $content;        $content = json_decode($content, true);        if (is_null($content)) {            $this->error = ['status' => "0001", "msg" => "参数content错误"];        }        foreach ($content as $key=>$item){            //检查数组中的参数是否完整            $this->checkItem($item);        }        $this->content_arr = $content;        return $this;    }    //检查数组中参数完整性    protected function checkItem($items)    {        foreach ($items as $key => $item) {            if (in_array($key, $this->contentArr)) {                if (!$item) {                    $this->error = ['status' => "0001", "msg" => "参数" . $key . "错误"];                }            } else {                $this->error = ['status' => "0001", "msg" => "参数" . $key . "必传"];            }        }        return $this;    }    //检查签名    protected function checkSign($sign)    {        $this->getSecretKey();        $signStr = $this->getSignStr();        $result = openssl_verify($signStr, base64_decode($sign), $this->secretKey);        if (!$result) {            $this->error = ['status' => "0001", "msg" => "签名验证失败!"];        }        $this->sign = $sign;        return $this;    }    //检查订单号,解冻时间等,看是否可以解冻    protected function checkUnfreeze($key,$item)    {        foreach ($item as $k=>$v){            $fun = "check" . ucfirst($k);            $this->$fun($key,$v);        }    }    //检查冻结订单    protected function checkFreezeordernumber($key,$freezeordernumber)    {        //判断订单号是否存在        $res = M('orderfreezemoney')->where('freezeordernumber="'.$freezeordernumber.'"')->find();        if(!$res){            $this->error_arr[$key] = ['status' => "0001", "msg" => "订单号为".$freezeordernumber."的订单不存在"];            //添加请求解冻的记录            $this->addUnfreezeTask($freezeordernumber,0,"订单号为".$freezeordernumber."的订单不存在");        }        //判断订单支付状态        if($res['order_status']==0){            $this->error_arr[$key] = ['status' => "0001", "msg" => "订单号为".$freezeordernumber."的支付状态有误"];            //添加请求解冻的记录            $this->addUnfreezeTask($freezeordernumber,0,"订单号为".$freezeordernumber."的支付状态有误");        }        //判断订单解冻状态        if($res['unfreeze']==1){            $this->error_arr[$key] = ['status' => "0000", "msg" => "订单号为".$freezeordernumber."的订单已解冻"];            //添加请求解冻的记录            $this->addUnfreezeTask($freezeordernumber,0,"订单号为".$freezeordernumber."的订单已解冻");        }        $this->content_arr[$key]['freezeordernumber'] = $freezeordernumber;        return $this;    }    //检查预计解冻时间    protected function checkExpect_time($key,$expect_time)    {        //判断时间格式        if (!preg_match("#\d{4}(\-[0-3][0-9]){2}\s[0-2][0-9](\:[0-5][0-9]){2}#", $expect_time, $match)) {            $this->error_arr[$key] = ['status' => "0001", "msg" => "expect_time格式错误"];            //添加请求解冻的记录            $this->addUnfreezeTask($this->content_arr[$key]['freezeordernumber'],0,"expect_time格式错误");        }        //判断是否到解冻时间        if($expect_time>date('Y-m-d H:i:s')){            $this->error_arr[$key] = ['status' => "0001", "msg" => "订单号为".$this->content_arr[$key]['freezeordernumber']."的订单还未到达解冻时间"];            //添加请求解冻的记录            $this->addUnfreezeTask($this->content_arr[$key]['freezeordernumber'],0,"订单号为".$this->content_arr[$key]['freezeordernumber']."的订单还未到达解冻时间");        }        //添加请求解冻成功的记录        $this->addUnfreezeTask($this->content_arr[$key]['freezeordernumber'],1,"请求解冻任务成功,可以执行解冻程序");        return $this;    }    //获取密钥    private function getSecretKey()    {        $user_secret_key = C('AMNPAY_PUBLIC_SECRETKEY');        $this->secretKey = $user_secret_key;        return $this;    }    //获取签名字符串    protected function getSignStr()    {        sort($this->parameters);        $str = '';        foreach ($this->parameters as $k => $parameter) {            if (!in_array($parameter, $this->exceptParameter)) {                $str .= $parameter . "=" . $this->$parameter . "&";            }        }        return trim($str, '&');    }    //添加请求解冻的记录    public function addUnfreezeTask($freezeordernumber,$can_unfreeze,$remarks)    {        $data = [            'freezeordernumber'=>$freezeordernumber,            'date_time'=>date('Y-m-d H:i:s'),            'can_unfreeze'=>$can_unfreeze,            'remarks'=>$remarks        ];        return M('orderunfreezetask')->lock(true)->add($data);    }    //修改用户金额    public function saveUsermoney($freeze_order,$user_money)    {        $data = [            'money'=>$user_money['money']+$freeze_order['freeze_money'],            'freezemoney'=>$user_money['freezemoney']-$freeze_order['freeze_money']        ];        return M('usermoney')->lock(true)->where('userid='.$freeze_order['user_id'])->save($data);    }    //添加资金变动记录    public function addMoneychange($freeze_order,$user_money)    {        $data = [            'userid'=>$freeze_order['user_id'],            'oldmoney'=>$user_money['money'],            'changemoney'=>$freeze_order['freeze_money'],            'nowmoney'=>$user_money['money']+$freeze_order['freeze_money'],            'datetime'=>date('Y-m-d H:i:s'),            'transid'=>$freeze_order['sysordernumber'],            'changetype'=>'unfreeze',            'remarks'=>'冻结订单'.$freeze_order['freezeordernumber'].'自动解冻成功'        ];        return M('moneychange')->lock(true)->add($data);    }    //修改冻结订单记录    public function saveOrderfreezemoney($freezeordernumber)    {        $data = [            'actual_time'=>date('Y-m-d H:i:s'),            'unfreeze'=>1,//已解冻            'unfreeze_type'=>0,//自动解冻            'task_unfreeze'=>1//已请求解冻        ];        return M('orderfreezemoney')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->save($data);    }    //添加自动解冻记录    public function addAutoUnfreeze($sysordernumber,$freezemoney_id)    {        $data = [            'sysordernumber'=>$sysordernumber,            'freezemoney_id'=>$freezemoney_id,            'status'=>1,            'date_time'=>date('Y-m-d H:i:s'),            'success_time'=>date('Y-m-d H:i:s')        ];        return M('autounfreeze')->add($data);    }    //查询冻结订单    public function getOrderfreezemoney($freezeordernumber)    {        return M('orderfreezemoney')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->find();    }    //查询冻结订单    public function getUsermoney($user_id)    {        return M('usermoney')->lock(true)->where('userid='.$user_id)->find();    }    //2019-02-26汪桂芳添加:返回的签名字符串    function getReturnSignStr($data)    {        $keys = [            'status',            'msg',            'merid',            'content'        ];        sort($keys);        $str = '';        foreach ($keys as $k => $parameter) {            $str .= $parameter . "=" . $data[$parameter] . "&";        }        return trim($str, '&');    }}