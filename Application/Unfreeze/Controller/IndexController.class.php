<?phpnamespace Unfreeze\Controller;use Think\Controller;//单条解冻class IndexController extends Controller {    protected $parameters = [        "merorderno",        "merid",        "version",        "createtime",        "request_url",        "notifyurl",        "sign"    ];    protected $exceptParameter = [        'sign',    ];    /*protected $no_must = [        'request_total', //访问失败重复访问次数        'request_spacing'//重复访问间隔时间    ];*/    protected $error = [];//错误信息    protected $merorderno;    protected $merid;    protected $version;    protected $createtime;    protected $request_url;    protected $notifyurl;    protected $sign;//    protected $request_total=10;//    protected $request_spacing=60;    public function index()    {        $par = $_POST;        //判断数据的合法性        $this->checkParameters($par);        //添加请求解冻成功的记录        $this->addUnfreezeTask($par['merorderno'],1,"请求解冻任务成功,可以执行解冻程序");        //解冻处理程序        ob_start();   //打开缓冲区        M()->startTrans();//开启事务        //查询冻结订单信息        $freeze_order = $this->getOrderfreezemoney($par['merorderno']);        //查询原始金额        $user_money = $this->getUsermoney($freeze_order['user_id']);        //1.用户金额修改程序        $res1 = $this->saveUsermoney($freeze_order,$user_money);        if(!$res1){            M()->rollback();  //回滚            $this->error = ['status' => "0001", "msg" => "任务失败,原因是修改用户金额失败"];            $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);        }        //2.添加金额变动记录        $res2 = $this->addMoneychange($freeze_order,$user_money);        if(!$res2){            M()->rollback();  //回滚            $this->error = ['status' => "0001", "msg" => "任务失败,原因是添加资金变动记录失败"];            $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);        }        //3.修改冻结订单字段        $res3 = $this->saveOrderfreezemoney($par['merorderno']);        if(!$res3){            M()->rollback();  //回滚            $this->error = ['status' => "0001", "msg" => "任务失败,原因是修改冻结订单记录失败"];            $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);        }        M()->commit();    //事务提交        //4.添加自动解冻记录        $this->addAutoUnfreeze($freeze_order['sysordernumber'],$freeze_order['id']);        //给独立系统返回数据        $return = [            'status' => "0000",             "msg" => "订单解冻成功,可以取消此任务了",             'merid'=>C('AMNPAY_MERID'), //独立系统分配的商户编号,从配置文件读出             'merorderno'=>$par['merorderno'],        ];        //签名        $userKey = C('AMNPAY_SECRETKEY'); //与独立系统对接的密钥,从配置文件读取        $signStr = $this->getReturnSignStr($return); //签名字符串        openssl_sign($signStr, $sign, $userKey);  //rsa加密        $return['sign'] = base64_encode($sign);        //返回成功信息        $this->ajaxReturn($return, "json", JSON_UNESCAPED_UNICODE);    }    //检查参数是否完整    protected function checkParameters($data)    {        //检查访问次数及间隔时间//        $this->checkNo_must($data);        //检查参数合法性        foreach ($this->parameters as $parameter) {            if (array_key_exists($parameter, $data)) {                if (!$data[$parameter]) {                    //添加请求解冻的记录                    $this->addUnfreezeTask($data['merorderno'],0,"参数" . $parameter . "为空");                    $this->error = ['status' => "0001", "msg" => "参数" . $parameter . "不能为空"];                }                //检查参数是否合法                $fun = "check" . ucfirst($parameter);                $this->$fun($data[$parameter]);            } else {                //添加请求解冻的记录                $this->addUnfreezeTask($data['merorderno'],0,"参数" . $parameter . "未传");                $this->error = ['status' => "0001", "msg" => "参数" . $parameter . "不能为空"];            }            if (count($this->error) > 0) {                $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);            }        }    }    //检查冻结订单    protected function checkMerorderno($merorderno)    {        //判断订单号是否存在        $res = M('orderfreezemoney')->where('freezeordernumber="'.$merorderno.'"')->find();        if(!$res){            $this->error = ['status' => "0001", "msg" => "订单号为".$merorderno."的订单不存在"];            //添加请求解冻的记录            $this->addUnfreezeTask($merorderno,0,"订单号为".$merorderno."的订单不存在");        }        //判断订单支付状态        if($res['order_status']==0){            $this->error = ['status' => "0001", "msg" => "订单号为".$merorderno."的支付状态有误"];            //添加请求解冻的记录            $this->addUnfreezeTask($merorderno,0,"订单号为".$merorderno."的支付状态有误");        }        //判断订单解冻状态        if($res['unfreeze']==1){            $this->error = ['status' => "0001", "msg" => "订单号为".$merorderno."的订单已解冻"];            //添加请求解冻的记录            $this->addUnfreezeTask($merorderno,0,"订单号为".$merorderno."的订单已解冻");        }        //判断解冻时间        if($res['expect_time']>date('Y-m-d H:i:s')){            $this->error = ['status' => "0001", "msg" => "订单号为".$merorderno."的订单还未到解冻时间"];            //添加请求解冻的记录            $this->addUnfreezeTask($merorderno,0,"订单号为".$merorderno."的订单预计解冻时间为".$res['expect_time'].',而请求解冻时间为'.date('Y-m-d H:i:s'));        }        $this->merorderno = $merorderno;        return $this;    }    //检查商户号    protected function checkMerid($merid)    {        if ($merid != C('AMNPAY_MERID')) {            //添加请求解冻的记录            $this->addUnfreezeTask($this->merorderno,0,"参数merid错误");            $this->error = ['status' => "0001", "msg" => "参数merid错误"];        }        $this->merid = $merid;        return $this;    }    //检查版本号    protected function checkVersion($version)    {        if ($version != C('AMNPAY_VERSION')) {            //添加请求解冻的记录            $this->addUnfreezeTask($this->merorderno,0,"版本号错误");            $this->error = ['status' => "0001", "msg" => "版本号错误"];        }        $this->version = $version;        return $this;    }    //检查请求解冻时间    protected function checkCreatetime($createtime)    {        //判断时间格式        if (!preg_match("#\d{4}(\-[0-1][0-9])(\-[0-3][0-9])\s[0-2][0-9](\:[0-5][0-9]){2}#", $createtime, $match)) {            $this->error = ['status' => "0001", "msg" => "createtime格式错误"];            //添加请求解冻的记录            $this->addUnfreezeTask($this->merorderno,0,"createtime格式错误");        }        $this->createtime = $createtime;        return $this;    }    //检查请求地址    protected function checkRequest_url($request_url)    {        $url = "https://www.juhezhifu.cc/Unfreeze/Index/index.html";        if($request_url!=$url){            //添加请求解冻的记录            $this->addUnfreezeTask($this->merorderno,0,"请求地址错误");            $this->error = ['status' => "0001", "msg" => "请求地址错误"];        }        $this->request_url = $request_url;        return $this;    }    //检查回调地址    protected function checkNotifyurl($notifyurl)    {        $this->notifyurl = $notifyurl;        return $this;    }    //检查签名    protected function checkSign($sign)    {        $secret_key = C('AMNPAY_PUBLIC_SECRETKEY');        $signStr = $this->getSignStr($this->parameters);        $result = openssl_verify($signStr, base64_decode($sign), $secret_key);        if (!$result) {            $this->error = ['status' => "0001", "msg" => "签名验证失败!"];            //添加请求解冻的记录            $this->addUnfreezeTask($this->merorderno,0,"签名验证失败");        }        $this->sign = $sign;        return $this;    }    //获取请求后解密时签名字符串    protected function getSignStr($data)    {        sort($data);        $str = '';        foreach ($data as $k => $parameter) {            if (!in_array($parameter, $this->exceptParameter)) {                $str .= $parameter . "=" . $this->$parameter . "&";            }        }        return trim($str, '&');    }    //获取返回加密时签名字符串    protected function getReturnSignStr($data)    {        ksort($data);        $str = '';        foreach ($data as $k => $parameter) {            $str .= $k . "=" . $parameter . "&";        }        return trim($str, '&');    }    //检查访问次数及时间    /*protected function checkNo_must($data)    {        foreach ($this->no_must as $item) {            if ($data[$item]) {                $fun = "check" . ucfirst($item);                $this->$fun($data);            }        }    }*/    //检查访问次数    /*protected function checkRequest_total($data)    {        //查询该订单已请求记录        $all = $this->slectUnfreezeTask($data['freezeordernumber']);        $request_total = $this->request_total;        if(count($all)>=$request_total){            $this->error = ['status' => "0001", "msg" => "请求次数已达上限"];            //添加请求解冻的记录            $this->addUnfreezeTask($data['freezeordernumber'],0,"订单号为" . $data['freezeordernumber'] . "的冻结订单请求解冻的次数已达上限");            //返回错误信息            $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);        }    }*/    //检查访问间隔时间    /*protected function checkRequest_spacing($data)    {        //查询该订单最近一次的请求时间        $last = $this->slectUnfreezeTask($data['freezeordernumber']);        $request_spacing = $this->request_spacing;        if((time()-strtotime($last['date_time']))<$request_spacing){            $this->error = ['status' => "0001", "msg" => "请求间隔时间太短,请".$request_spacing."秒后再请求"];            //添加请求解冻的记录            $this->addUnfreezeTask($data['freezeordernumber'],0,"订单号为" . $data['freezeordernumber'] . "的冻结订单请求间隔时间太短");            //返回错误信息            $this->ajaxReturn($this->error, "json", JSON_UNESCAPED_UNICODE);        }    }*/    //添加请求解冻的记录    public function addUnfreezeTask($freezeordernumber,$can_unfreeze,$remarks)    {        $data = [            'freezeordernumber'=>$freezeordernumber,            'date_time'=>date('Y-m-d H:i:s'),            'can_unfreeze'=>$can_unfreeze,            'remarks'=>$remarks        ];        return M('orderunfreezetask')->lock(true)->add($data);    }    //查询请求记录    public function slectUnfreezeTask($freezeordernumber)    {        return M('orderunfreezetask')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->select();    }    //查询最近一次请求记录    public function lastUnfreezeTask($freezeordernumber)    {        return M('orderunfreezetask')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->order('date_time desc')->find();    }    //修改用户金额    public function saveUsermoney($freeze_order,$user_money)    {        $data = [            'money'=>$user_money['money']+$freeze_order['freeze_money'],            'freezemoney'=>$user_money['freezemoney']-$freeze_order['freeze_money']        ];        return M('usermoney')->lock(true)->where('userid='.$freeze_order['user_id'])->save($data);    }    //添加资金变动记录    public function addMoneychange($freeze_order,$user_money)    {        $data = [            'userid'=>$freeze_order['user_id'],            'oldmoney'=>$user_money['money'],            'changemoney'=>$freeze_order['freeze_money'],            'nowmoney'=>$user_money['money']+$freeze_order['freeze_money'],            'datetime'=>date('Y-m-d H:i:s'),            'transid'=>$freeze_order['sysordernumber'],            'changetype'=>3,            'remarks'=>'冻结订单'.$freeze_order['freezeordernumber'].'自动解冻成功'        ];        return M('moneychange')->lock(true)->add($data);    }    //修改冻结订单记录    public function saveOrderfreezemoney($freezeordernumber)    {        $data = [            'actual_time'=>date('Y-m-d H:i:s'),            'unfreeze'=>1,//已解冻            'unfreeze_type'=>0,//自动解冻            'task_unfreeze'=>1//请求成功        ];        return M('orderfreezemoney')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->save($data);    }    //添加自动解冻记录    public function addAutoUnfreeze($sysordernumber,$freezemoney_id)    {        $data = [            'sysordernumber'=>$sysordernumber,            'freezemoney_id'=>$freezemoney_id,            'status'=>1,            'date_time'=>date('Y-m-d H:i:s'),            'success_time'=>date('Y-m-d H:i:s')        ];        return M('autounfreeze')->add($data);    }    //查询冻结订单    public function getOrderfreezemoney($freezeordernumber)    {        return M('orderfreezemoney')->lock(true)->where('freezeordernumber="'.$freezeordernumber.'"')->find();    }    //查询用户金额    public function getUsermoney($user_id)    {        return M('usermoney')->lock(true)->where('userid='.$user_id)->find();    }}